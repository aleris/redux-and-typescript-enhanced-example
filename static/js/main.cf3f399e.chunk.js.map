{"version":3,"sources":["App/App.module.css","assets/bot.png","assets/fox.png","features/ChatInterface/ChatInterface.module.css","assets/logo.svg","store/chat.ts","store/system.ts","store/index.ts","features/ChatHistory/ChatHistory.tsx","features/ChatInterface/ChatInterface.tsx","remote/messages.ts","App/App.tsx","index.tsx","features/ChatHistory/ChatHistory.module.css"],"names":["module","exports","SendMessageAction","type","newMessage","state","action","messages","_TYPE","DeleteMessageAction","meta","filter","message","timestamp","initialState","UpdateSystemStateAction","newSystemState","loggedIn","session","userName","rootReducer","combineReducers","system","_reduce","chat","dateTimeFormat","Intl","DateTimeFormat","hour","minute","second","ChatHistory","deleteMessage","className","styles","chatHistory","map","isMe","you","other","key","user","title","src","fox","bot","alt","date","format","onClick","ChatInterface","updateMessage","sendMessage","callSendMessage","chatInterface","value","onChange","onKeyPress","e","placeholder","Messages","Promise","resolve","dispatch","a","_getMessageAPI","exampleAPIResponse","createAction","Date","getTime","App","event","setState","currentTarget","props","this","updateSystemState","getMessage","app","logo","width","React","mapDispatchToProps","connect","store","middlewareList","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","setTimeout","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf3f399e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__13Yue\",\"title\":\"App_title__21tVk\"};","module.exports = __webpack_public_path__ + \"static/media/bot.caa4eec2.png\";","module.exports = __webpack_public_path__ + \"static/media/fox.515ea565.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatInterface\":\"ChatInterface_chatInterface__2FnfJ\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Action } from 'redux'\n\n/**\n * State and data model types\n */\nexport interface Message {\n  user: string\n  message: string\n  timestamp: number\n  isMe: boolean\n}\n\nexport interface ChatState {\n  messages: Message[]\n}\n\n/**\n * Send message action\n */\nexport abstract class SendMessageAction implements Action<string> {\n  static readonly _TYPE = 'SendMessageAction'\n\n  static _reduce(state: ChatState, action: SendMessageAction): ChatState {\n    return {\n      messages: [...state.messages, action.newMessage]\n    }\n  }\n\n  static createAction(newMessage: Message): SendMessageAction {\n    return {\n      type: SendMessageAction._TYPE,\n      newMessage\n    }\n  }\n\n  abstract readonly type: string\n  abstract readonly newMessage: Message\n}\n\n/**\n * Delete message action\n */\nexport abstract class DeleteMessageAction implements Action<string> {\n  static readonly _TYPE = 'DeleteMessageAction'\n\n  static _reduce(state: ChatState, action: DeleteMessageAction): ChatState {\n    return {\n      messages: state.messages.filter(\n        message => message.timestamp !== action.meta.timestamp\n      )\n    }\n  }\n\n  static createAction(timestamp: number): DeleteMessageAction {\n    return {\n      type: DeleteMessageAction._TYPE,\n      meta: {\n        timestamp\n      }\n    }\n  }\n\n  abstract readonly type: string\n  abstract readonly meta: {\n    timestamp: number\n  }\n}\n\n/**\n * Initial chat state\n */\nconst initialState: ChatState = {\n  messages: []\n}\n\n/**\n * Union of chat actions\n */\ntype ChatActionTypes = SendMessageAction | DeleteMessageAction\n\n/**\n * Reducer for all chat actions\n * @param state\n * @param action\n */\nexport function chatReducer(\n  state = initialState,\n  action: ChatActionTypes\n): ChatState {\n  switch (action.type) {\n    case SendMessageAction._TYPE:\n      return SendMessageAction._reduce(state, action as SendMessageAction)\n    case DeleteMessageAction._TYPE:\n      return DeleteMessageAction._reduce(state, action as DeleteMessageAction)\n    default:\n      return state\n  }\n}\n","import { Action } from 'redux'\n\n/**\n * State and data model types\n */\nexport interface SystemState {\n  loggedIn: boolean\n  session: string\n  userName: string\n}\n\n/**\n * Update system state action\n */\nexport abstract class UpdateSystemStateAction implements Action<string> {\n  static readonly _TYPE = 'UpdateSystemStateAction'\n\n  static _reduce(\n    state: SystemState,\n    action: UpdateSystemStateAction\n  ): SystemState {\n    return {\n      ...state,\n      ...action.newSystemState\n    }\n  }\n\n  static createAction(newSystemState: SystemState): UpdateSystemStateAction {\n    return {\n      type: UpdateSystemStateAction._TYPE,\n      newSystemState: newSystemState\n    }\n  }\n\n  abstract readonly type: string\n  abstract readonly newSystemState: SystemState\n}\n\n/**\n * Initial system state\n */\nconst initialState: SystemState = {\n  loggedIn: false,\n  session: '',\n  userName: ''\n}\n\n/**\n * Union of system actions\n */\ntype SystemActionTypes = UpdateSystemStateAction\n\n/**\n * Reducer for all system actions\n * @param state\n * @param action\n */\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case UpdateSystemStateAction._TYPE:\n      return UpdateSystemStateAction._reduce(\n        state,\n        action as UpdateSystemStateAction\n      )\n    default:\n      return state\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, Store } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport { chatReducer } from './chat'\nimport { systemReducer } from './system'\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  chat: chatReducer\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default function configureStore(): Store<AppState> {\n  const middlewareList = [thunkMiddleware]\n  const middleWareEnhancer = applyMiddleware(...middlewareList)\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  )\n\n  return store\n}\n","import * as React from 'react'\nimport { DeleteMessageAction, Message } from '../../store/chat'\n\nimport styles from './ChatHistory.module.css'\n\nimport bot from '../../assets/bot.png'\nimport fox from '../../assets/fox.png'\n\ninterface ChatHistoryProps {\n  messages: Message[]\n  deleteMessage: typeof DeleteMessageAction.createAction\n}\n\nconst dateTimeFormat = new Intl.DateTimeFormat('en-GB', {\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit'\n})\n\nfunction formatTimestamp(timestamp: number): string {\n  return dateTimeFormat.format(timestamp)\n}\n\nconst ChatHistory: React.FunctionComponent<ChatHistoryProps> = ({\n  messages,\n  deleteMessage\n}: ChatHistoryProps) => {\n  return (\n    <div className={styles.chatHistory}>\n      <ul>\n        {messages.map(message => (\n          <li\n            className={message.isMe ? styles.you : styles.other}\n            key={message.timestamp}\n          >\n            <div className={styles.user} title={message.user}>\n              <img src={message.isMe ? fox : bot} alt={message.user} />\n            </div>\n            <div className={styles.date}>\n              {formatTimestamp(message.timestamp)}\n            </div>\n            <div className={styles.message}>\n              <p>{message.message}</p>\n              <button\n                onClick={(): DeleteMessageAction =>\n                  deleteMessage(message.timestamp)\n                }\n              >\n                Delete\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default ChatHistory\n","import * as React from 'react'\nimport { UpdateMessageParam } from '../../App/App'\n\nimport styles from './ChatInterface.module.css'\n\ninterface ChatInterfaceProps {\n  message: string\n  userName: string\n  sendMessage: (message: string) => void\n  updateMessage: (event: UpdateMessageParam) => void\n}\n\nconst ChatInterface: React.FunctionComponent<ChatInterfaceProps> = ({\n  userName,\n  message,\n  updateMessage,\n  sendMessage\n}: ChatInterfaceProps) => {\n  function callSendMessage(): void {\n    sendMessage(message)\n  }\n\n  function sendMessageOnKeyPress(\n    e: React.KeyboardEvent<HTMLInputElement>\n  ): void {\n    if (e.key === 'Enter') {\n      callSendMessage()\n    }\n  }\n\n  return (\n    <div className={styles.chatInterface}>\n      <input\n        value={message}\n        onChange={updateMessage}\n        onKeyPress={sendMessageOnKeyPress}\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={callSendMessage}>Send</button>\n    </div>\n  )\n}\n\nexport default ChatInterface\n","import { ThunkAction } from 'redux-thunk'\r\nimport { AppState } from '../store'\r\nimport { SendMessageAction } from '../store/chat'\r\n\r\ninterface GetMessageAPIResponse {\r\n  user: string\r\n  message: string\r\n}\r\n\r\nexport abstract class Messages {\r\n  static _getMessageAPI(): Promise<GetMessageAPIResponse> {\r\n    return Promise.resolve({\r\n      user: 'Async Chat Bot',\r\n      message: 'This message was sent by a thunk!'\r\n    })\r\n  }\r\n\r\n  static getMessage(): ThunkAction<void, AppState, null, SendMessageAction> {\r\n    return async dispatch => {\r\n      const exampleAPIResponse = await Messages._getMessageAPI()\r\n      dispatch(\r\n        SendMessageAction.createAction({\r\n          user: exampleAPIResponse.user,\r\n          message: exampleAPIResponse.message,\r\n          timestamp: new Date().getTime(),\r\n          isMe: false\r\n        })\r\n      )\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { AppState } from '../store'\n\nimport styles from './App.module.css'\n\nimport ChatHistory from '../features/ChatHistory/ChatHistory'\nimport ChatInterface from '../features/ChatInterface/ChatInterface'\n\nimport {\n  ChatState,\n  DeleteMessageAction,\n  SendMessageAction\n} from '../store/chat'\nimport { SystemState, UpdateSystemStateAction } from '../store/system'\nimport { Messages } from '../remote/messages'\nimport { ReactElement } from 'react'\n\nimport logo from '../assets/logo.svg'\n\ninterface AppProps {\n  sendMessage: typeof SendMessageAction.createAction\n  deleteMessage: typeof DeleteMessageAction.createAction\n  updateSystemState: typeof UpdateSystemStateAction.createAction\n  chat: ChatState\n  system: SystemState\n  getMessage: () => void\n}\n\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>\n\nclass App extends React.Component<AppProps> {\n  state = {\n    message: ''\n  }\n\n  componentDidMount(): void {\n    // some test calls, obviously these would not be here in a real app:\n    this.props.updateSystemState({\n      loggedIn: true,\n      session: 'my_session',\n      userName: 'My Name'\n    })\n    this.props.sendMessage({\n      user: 'Chat Bot',\n      message:\n        'This is a very basic chat application written in typescript using react and redux. Feel free to explore the source code.',\n      timestamp: new Date().getTime(),\n      isMe: false\n    })\n\n    this.props.getMessage()\n  }\n\n  updateMessage = (event: UpdateMessageParam): void => {\n    this.setState({ message: event.currentTarget.value })\n  }\n\n  sendMessage = (message: string): void => {\n    this.props.sendMessage({\n      user: this.props.system.userName,\n      message: message,\n      timestamp: new Date().getTime(),\n      isMe: true\n    })\n    this.setState({ message: '' })\n  }\n\n  render(): ReactElement {\n    return (\n      <div className={styles.app}>\n        <header>\n          <div><img src={logo} width={100} alt=\"React Logo\"/> </div>\n          <div className={styles.title}>Chatux Reactux Typescriptux</div>\n        </header>\n        <section>\n          <ChatHistory\n            messages={this.props.chat.messages}\n            deleteMessage={this.props.deleteMessage}\n          />\n        </section>\n        <footer>\n          <ChatInterface\n            userName={this.props.system.userName}\n            message={this.state.message}\n            updateMessage={this.updateMessage}\n            sendMessage={this.sendMessage}\n          />\n        </footer>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  system: state.system,\n  chat: state.chat\n})\n\nconst mapDispatchToProps = {\n  sendMessage: SendMessageAction.createAction,\n  deleteMessage: DeleteMessageAction.createAction,\n  updateSystemState: UpdateSystemStateAction.createAction,\n  getMessage: Messages.getMessage\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","import * as React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport configureStore from './store'\n\nimport './index.css'\n\nimport App from './App/App'\nimport { SendMessageAction } from './store/chat'\n\nconst store = configureStore()\n\nsetTimeout(() => {\n  store.dispatch(\n    SendMessageAction.createAction({\n      user: 'Their Name',\n      message: 'What do you think about react, redux or typescript?',\n      timestamp: new Date().getTime(),\n      isMe: false\n    })\n  )\n}, 5555)\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nrender(<Root />, document.getElementById('root'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatHistory\":\"ChatHistory_chatHistory__2Smzy\",\"user\":\"ChatHistory_user__3K-8t\",\"date\":\"ChatHistory_date__2o1qH\",\"message\":\"ChatHistory_message__14ciz\",\"other\":\"ChatHistory_other__gZ86J\",\"you\":\"ChatHistory_you__11r0F\"};"],"sourceRoot":""}